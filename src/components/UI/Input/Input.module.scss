@import './scss/Input.default.scss';

label.label {
  display: flex;
  align-items: center;
  gap: 0.5rem;

  font-size: 0.9rem;
  font-style: normal;
  font-weight: 400;
  line-height: 120%;
  user-select: none;

  padding: 0.75rem 1rem;
  border: 2px solid;
  border-radius: 0.5rem;
  transition: 0.15s ease;

  &:has(.error.active) {
    .inputContainer {
      input {
        top: 0.375rem;
      }
    }
  }

  &:not(:has(input:read-only), :has(input:disabled)) {
    cursor: text;
  }

  &.fill {
    width: 100%;
  }

  .inputContainer {
    position: relative;
    width: 100%;
    height: 100%;
    transition: inherit;

    .error {
      position: absolute;
      top: -0.8rem;
      max-width: 100%;
      white-space: nowrap;
      text-overflow: ellipsis;

      font-weight: 500;
      font-size: 0.62rem;
      opacity: 0;
      transition: 0.15s ease;

      &.active {
        top: -0.4rem;
        opacity: 1;
      }
    }

    input {
      position: relative;
      top: 0;
      width: 100%;
      height: 100%;
      border: none;
      outline: none;
      background: none;
      width: 100%;
      font-size: inherit;
      transition: inherit;
    }
  }

  &:has(.icon.eye) {
    .icon:not(.eye) {
      display: none;
    }

    .after {
      display: none;
    }
  }

  .after {
    flex-shrink: 0;
    white-space: nowrap;
    font-weight: 500;
    font-size: 1rem;
  }

  .icon {
    $size: 1rem;
    height: $size;
    flex-shrink: 0;

    svg {
      width: 100%;
      height: 100%;
    }

    &.eye {
      margin-left: auto;
      cursor: pointer;
    }

    * {
      color: currentColor;
    }

    [stroke]:not([stroke~='none']) {
      stroke: currentColor;
    }
    [fill]:not([fill~='none']) {
      fill: currentColor;
    }
  }

  &:has(input:disabled, input:read-only) {
    user-select: none;
    -webkit-user-drag: none;
    cursor: default;

    * {
      cursor: default;
    }
  }

  &::placeholder {
    color: white;
    font-weight: 400;
  }
}
